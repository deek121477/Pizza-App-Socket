{"version":3,"sources":["authController.js"],"names":["require","request","passport","User","login","res","render","postLogin","authController","next","_req$body","req","body","email","password","flash","authenticate","err","user","info","message","logIn","redirect","register","postRegister","_req$body2","name","hashedPassword","regeneratorRuntime","async","_context","prev","abrupt","exists","result","awrap","hash","sent","stop","logout","module","exports"],"mappings":"0BAAoBA,QAAQ,WAApBC,iBAAAA,QACFC,SAAWF,QAAQ,YACnBG,KAAOH,QAFOA,qBAAZC,OAGOD,QAHPC,UACR,SAAMC,iBAKF,MAAO,CAJDE,MAIC,SAJEJ,EAAQK,GAMRA,EAAIC,OAAO,eAHxBC,UACW,SADFC,EAATH,EAAyBI,GAAA,IAAAC,EAEFC,EAAAC,KADZC,EADcH,EACdG,MACGF,EAFWD,EAEXC,SADH,IAAAE,IAAAC,EAKsB,OALtBH,EAAAI,MAAA,QAKOJ,2BAEqBA,EAAIC,SAFV,UAEPE,SAFOE,aAEPF,QACf,SAAAG,EAAAC,EAAAC,GAMQ,OAAGF,GALGH,EAAAA,MAAS,QAAAK,EAAAC,SACAX,EAAAQ,IASVC,OAFJP,EAAAU,MAAAH,EAAA,SAAAD,GAQA,OAAGA,GANON,EAAAI,MAAA,QAAAI,EAAAC,SACSD,EAAKC,IAUjBf,EAAIiB,SAAS,QAjBjBN,EAAAA,MAAa,QAASG,EAAAC,SACnBf,EAAAiB,SAAA,YAPAR,CAkBHG,EAAKZ,EAAAI,IAGPc,SA5BV,SA4BUZ,EAAAN,GAQTA,EAAIC,OAAO,kBAvBTkB,aAbH,SAaGb,EAAAN,GAbH,IAAAoB,EAAAC,EAAAb,EAAAC,EAAAa,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAArB,MAAA,KAAA,EAAA,GAAAgB,EAAAd,EAAAC,KAAAc,EAAAD,EAAAC,KAAAb,EAAAY,EAAAZ,MAAAC,EAAAW,EAAAX,SAoCKR,GAAOO,GAAXC,EApCD,CAAAgB,EAAArB,KAAA,EAAA,MAAA,OAAAE,EAAAI,MAAA,QAAA,2BAuCES,EAvCFT,MAAA,OAAAW,GAAAf,EAAAI,MAAA,QAAAF,GAAAiB,EAAAE,OAAA,SA8CW3B,EAAIiB,SAAS,cA9CxB,KAAA,EAAA,OAAAnB,KAAA8B,OAAA,CAAApB,MAAAA,GAAA,SAAAI,EAAAiB,GAAA,GAAAA,EAAA,OAoDIvB,EAAII,MAAM,QAAS,uBApDvBJ,EAAAI,MA0CG,OAAUF,GA1CbF,EAAAI,MAAA,QAAAF,GAAAR,EAAAiB,SAAA,eAAAQ,EAAArB,KAAA,EAAAmB,mBAAAO,MA6CuBtB,OAAnBuB,KAAAtB,EAAA,KA7CJ,KAAA,EA6CIH,EA7CJmB,EAAAO,KAiDA,IAAAlC,KAAA,CACFA,KAAAA,EAAcU,MAAAA,EAAFC,SAAkBa,IAGxBhB,OAAAA,KAAII,SAAAA,GAEJ,OAAAV,EAAOA,SAAIiB,OAFXX,MAGF,SAAAM,GAmBD,OAlBHN,EAPAI,MASD,QAAA,wBAgBWV,EAAIiB,SAAS,eA3ErB,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAQ,WAAAC,OAAA,SAAA5B,EAAAN,GA8DH,OAFMsB,EAAAA,SAENtB,EAAAiB,SAAA,YAEsBkB,OAAAC,QAhEnBjC","file":"authController.min.js","sourcesContent":["const { request } = require(\"express\")\r\nconst passport = require('passport')\r\nconst User = require('../../models/user')\r\nconst bcrypt = require('bcrypt')\r\n\r\nfunction authController(){\r\n    return {\r\n        login(req, res){\r\n             res.render('auth/login')\r\n        },\r\n\r\n        postLogin(req, res, next){\r\n\r\n            const {email, password } = req.body\r\n           //Validate request\r\n           if(!email || !password){\r\n               req.flash('error', 'All fields are required')\r\n               return res.redirect('/login')\r\n           }\r\n              passport.authenticate('local', (err, user, info) =>{\r\n                   if(err){\r\n                       req.flash('error', info.message)\r\n                       return next(err)\r\n                   }   \r\n\r\n                    if(!user) {\r\n                    req.flash('error', info.message )\r\n                    return res.redirect('/login')\r\n                }\r\n\r\n                req.logIn(user, (err) => {\r\n                    if(err) {\r\n                        req.flash('error', info.message ) \r\n                        return next(err)\r\n                    }\r\n\r\n                    return res.redirect('/')\r\n                })\r\n            })(req, res, next)\r\n        },\r\n\r\n        register(req, res){\r\n            res.render('auth/register')\r\n       },\r\n\r\n       async postRegister (req, res) {\r\n           const { name, email, password } = req.body\r\n           //Validate request\r\n           if(!name || !email || !password){\r\n               req.flash('error', 'All fields are required')\r\n               req.flash('name', name)\r\n               req.flash('email', email)\r\n               return res.redirect('/register')\r\n           }\r\n\r\n           // Check if email exists \r\n         User.exists({ email: email }, (err, result) => {\r\n            if(result) {\r\n               req.flash('error', 'Email already taken')\r\n               req.flash('name', name)\r\n               req.flash('email', email) \r\n               return res.redirect('/register')\r\n            }\r\n        })\r\n\r\n        //Hash Password\r\n        const hashedPassword = await bcrypt.hash(password, 10)\r\n\r\n        // Create a user\r\n\r\n        const user = new User({\r\n            name,\r\n            email,\r\n            password: hashedPassword\r\n        })\r\n\r\n        user.save().then((user) =>{\r\n            //Login\r\n                return res.redirect('/')\r\n        }).catch(err =>{\r\n            req.flash('error', 'Something went wrong')\r\n            return res.redirect('/register')\r\n        })\r\n       },\r\n\r\n       logout(req, res){\r\n           req.logout()\r\n           return res.redirect('/login')\r\n       }\r\n    }\r\n}\r\n\r\nmodule.exports = authController"]}